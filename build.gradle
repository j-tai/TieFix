plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    // Mod Menu
    maven { url "https://maven.terraformersmc.com/" }
    // Cloth Config
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include "me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// Mod publication scripts

// Read secrets from secrets.properties
def secretsFile = file('secrets.properties')
def secrets = new Properties()
if (secretsFile.canRead()) {
    secrets.load(new FileInputStream(secretsFile))
}

// Read changelog for current version from CHANGELOG.md
// Ideally, we would only have to run this code if the current task requires it.
// But CurseGradle doesn't seem to allow setting the changelog at runtime.
// If I'm wrong, send a PR!
def theChangelog = null
new BufferedReader(new FileReader(file('CHANGELOG.md'))).withCloseable {
    while (true) {
        def line = it.readLine()
        if (line == null) {
            break
        }
        if (line.startsWith("## v${project.version} (")) {
            // Start reading changelog here
            theChangelog = ''
        } else if (theChangelog != null) {
            if (line.startsWith('## ')) {
                // Stop reading here
                break
            }
            theChangelog += line + '\n'
        }
    }
    theChangelog = (theChangelog ?: '').trim()
}

task genChangelog() {
    doLast {
        new BufferedWriter(new FileWriter(file('build/changelog.md'))).withCloseable {
            it.write(theChangelog)
        }
    }
}

// Modrinth: ./gradlew modrinth
import com.modrinth.minotaur.TaskModrinthUpload

modrinth {
    token = secrets.getProperty('modrinthToken', '')
    projectId = 'jxuxsA0D'
    versionNumber = project.version
    versionName = 'v' + project.version
    uploadFile = remapJar
    changelog = theChangelog
    gameVersions = [project.minecraft_version]
    loaders = ['fabric']
    syncBodyFrom = rootProject.file("README.md").text
}

// CurseForge: ./gradlew curseforge
curseforge {
    apiKey = secrets.getProperty('curseforgeApiKey', '')
    project {
        id = '560957'
        changelog = theChangelog
        changelogType = 'markdown'
        releaseType = 'release'
        addGameVersion project.minecraft_version
        mainArtifact(remapJar) {
            displayName = "v$project.version"
        }
    }
    options {
        forgeGradleIntegration = false
    }
}
